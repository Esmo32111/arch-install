#!/usr/bin/env bash
# arch-dotfiles-install.sh
# Single-script bootstrap for Arch Linux: i3, yay, common tools, dotfiles, and Srcery Xresources.
# USAGE: curl -o install.sh https://... && chmod +x install.sh && ./install.sh
# Run as a normal user (script uses sudo for system installs).
set -euo pipefail

USER_HOME="${HOME}"
DOTFILES_DIR="${USER_HOME}/.dotfiles"
YAY_DIR="/tmp/yay-build"
AUR_BUILD_DEPENDENCIES=(git base-devel)
PACMAN_PKGS=(
  # X & core
  xorg-server xorg-xinit xorg-apps xterm xorg-fonts-misc \
  # Window manager and utilities
  i3-wm i3status rofi dmenu xbindkeys feh picom \
  # Terminals and shells
  alacritty kitty bash zsh \
  # Fonts & icons
  ttf-dejavu ttf-liberation noto-fonts ttf-nerd-fonts-symbols \
  # Compositor/appearance
  lxappearance papirus-icon-theme \
  # Audio & networking
  networkmanager network-manager-applet pipewire pipewire-pulse pavucontrol bluez bluez-utils \
  # Browsers / multimedia / misc
  firefox neovim mpv thunar vlc imagemagick \
  # Tools for development
  git make cmake python python-pip nodejs npm go docker unzip unzip zip rsync \
  # CLI niceties
  tmux htop ripgrep fd bat exa glances \
  # For printing (optional)
  cups
)

# AUR packages to install via yay (will be installed after yay is built)
AUR_PKGS=(
  polybar # if you want a fancy status bar
  ttf-fira-code-nerd # extra font example
  # add any other AUR-only packages you want here
)

# Srcery (official) repo to fetch terminal/Xresources files from:
SRCERY_REPO="https://github.com/srcery-colors/srcery-terminal.git"

# -------------------------------------------------------
# Helper functions
# -------------------------------------------------------
echoinfo(){ printf "\\n\\e[1;34m[INFO]\\e[0m %s\\n" "$*"; }
echowarn(){ printf "\\n\\e[1;33m[WARN]\\e[0m %s\\n" "$*"; }
echofail(){ printf "\\n\\e[1;31m[ERROR]\\e[0m %s\\n" "$*"; exit 1; }

ensure_sudo(){
  if ! command -v sudo >/dev/null 2>&1; then
    echowarn "sudo not found. Installing sudo..."
    su -c "pacman -Sy --noconfirm sudo"
  fi
}

check_arch(){
  if [[ -f /etc/os-release ]]; then
    . /etc/os-release
    if [[ "${ID:-}" != "arch" && "${ID_LIKE:-}" != *"arch"* ]]; then
      echofail "This script is intended for Arch Linux. /etc/os-release indicates: ${ID:-unknown}"
    fi
  else
    echofail "/etc/os-release not found; cannot confirm Arch Linux."
  fi
}

install_pacman_packages(){
  echoinfo "Refreshing pacman DB and installing packages..."
  sudo pacman -Syu --noconfirm
  # group installation in chunks to avoid extremely long single command lines
  sudo pacman -S --needed --noconfirm "${PACMAN_PKGS[@]}"
}

install_aur_helper(){
  # installs yay from AUR (builds it)
  if command -v yay >/dev/null 2>&1; then
    echoinfo "yay already installed."
    return
  fi

  echoinfo "Installing AUR helper (yay)..."
  mkdir -p "${YAY_DIR}"
  pushd "${YAY_DIR}" >/dev/null
  git clone https://aur.archlinux.org/yay.git || {
    echowarn "Failed to clone yay from AUR; trying GitHub mirror..."
    git clone https://github.com/Jguer/yay.git
  }
  cd yay
  makepkg -si --noconfirm
  popd >/dev/null
  echoinfo "yay installed."
}

install_aur_packages(){
  if [[ ${#AUR_PKGS[@]} -eq 0 ]]; then
    echoinfo "No AUR packages configured to install."
    return
  fi
  echoinfo "Installing AUR packages via yay..."
  yay -S --noconfirm --needed "${AUR_PKGS[@]}"
}

create_dotfiles_layout(){
  echoinfo "Creating dotfiles directory at ${DOTFILES_DIR}..."
  mkdir -p "${DOTFILES_DIR}/config/i3"
  mkdir -p "${DOTFILES_DIR}/config/alacritty"
  mkdir -p "${DOTFILES_DIR}/config/rofi"
  mkdir -p "${DOTFILES_DIR}/config/polybar"
  mkdir -p "${DOTFILES_DIR}/bin"
}

install_srcery_xresources(){
  echoinfo "Cloning srcery terminal repository to fetch Xresources..."
  local tmp="/tmp/srcery-terminal"
  rm -rf "${tmp}"
  git clone --depth 1 "${SRCERY_REPO}" "${tmp}" || {
    echowarn "Failed to git-clone ${SRCERY_REPO}. Skipping srcery Xresources install."
    return
  }

  # try to find a Xresources/xrdb file in the repo
  if [[ -f "${tmp}/Xresources/srcery.Xresources" ]]; then
    cp "${tmp}/Xresources/srcery.Xresources" "${DOTFILES_DIR}/Xresources.srcery"
    echoinfo "Installed srcery Xresources to ${DOTFILES_DIR}/Xresources.srcery"
  else
    # fallback: some repos place files in different paths - try generic Xresources files
    find "${tmp}" -type f -iname "*xresources*" -maxdepth 3 -print -quit | while read -r f; do
      cp "$f" "${DOTFILES_DIR}/Xresources.srcery"
      echoinfo "Installed srcery Xresources (fallback) to ${DOTFILES_DIR}/Xresources.srcery"
      break
    done
  fi

  # also copy alacritty or term config if present
  if [[ -f "${tmp}/alacritty.yml" ]]; then
    cp "${tmp}/alacritty.yml" "${DOTFILES_DIR}/config/alacritty/alacritty.yml"
    echoinfo "Copied srcery alacritty.yml to ${DOTFILES_DIR}/config/alacritty/alacritty.yml"
  fi

  # Clean up
  rm -rf "${tmp}"
}

write_bashrc(){
  cat > "${DOTFILES_DIR}/bashrc" <<'EOF'
# ~/.dotfiles/bashrc - generated by arch-dotfiles-install.sh
# load system profile
if [ -f /etc/profile ]; then
  . /etc/profile
fi

# custom PATH additions
export PATH="$HOME/.local/bin:$PATH"

# nice prompt: user@host:cwd $
PS1='\u@\h:\w\$ '

# some aliases
alias ll='ls -lah --color=auto'
alias la='ls -A'
alias l='ls -CF'
alias gs='git status'

# useful env
export EDITOR=neovim

# load .profile if present
[ -f "$HOME/.profile" ] && source "$HOME/.profile"
EOF

  ln -sf "${DOTFILES_DIR}/bashrc" "${USER_HOME}/.bashrc"
  echoinfo "Wrote ~/.bashrc (symlinked to ${DOTFILES_DIR}/bashrc)."
}

write_xinitrc_and_i3(){
  # .xinitrc
  cat > "${DOTFILES_DIR}/xinitrc" <<'EOF'
#!/bin/sh
# ~/.xinitrc - start i3 and set Xresources
if [ -f "$HOME/.Xresources" ]; then
  xrdb -merge "$HOME/.Xresources"
fi

# start compositor if available
picom --config $HOME/.config/picom/picom.conf &

# start i3
exec i3
EOF
  ln -sf "${DOTFILES_DIR}/xinitrc" "${USER_HOME}/.xinitrc"
  chmod +x "${DOTFILES_DIR}/xinitrc"

  # minimal i3 config (very basic)
  cat > "${DOTFILES_DIR}/config/i3/config" <<'EOF'
# minimal i3 config generated by installer
set $mod Mod4
font pango:monospace 10

bindsym $mod+Return exec alacritty
bindsym $mod+d exec rofi -show run
bindsym $mod+Shift+q kill
bindsym $mod+Shift+r restart

exec --no-startup-id nm-applet
exec --no-startup-id /usr/bin/pipewire
EOF
  ln -sf "${DOTFILES_DIR}/config/i3/config" "${USER_HOME}/.config/i3/config"
  echoinfo "Wrote ~/.xinitrc and a minimal i3 config."
}

write_alacritty_config(){
  # create a minimal alacritty config that will pick up srcery if present
  cat > "${DOTFILES_DIR}/config/alacritty/alacritty.yml" <<'EOF'
# Alacritty config - minimal
window:
  padding:
    x: 6
    y: 6

font:
  normal:
    family: "DejaVu Sans Mono"
    size: 11.0

# If you have an Xresources-based colorscheme, alacritty can be set manually,
# but here we recommend using the srcery alacritty.yml if present
EOF

  ln -sf "${DOTFILES_DIR}/config/alacritty/alacritty.yml" "${USER_HOME}/.config/alacritty/alacritty.yml"
  echoinfo "Wrote minimal alacritty config (you can replace it with srcery's alacritty.yml)."
}

write_rofi_and_polybar_samples(){
  # rofi config sample
  cat > "${DOTFILES_DIR}/config/rofi/config.rasi" <<'EOF'
/* rofi config - simple */
configuration {
  modi: "run,drun";
  sidebar-mode: false;
}
window {
  width: 50%;
}
EOF
  ln -sf "${DOTFILES_DIR}/config/rofi/config.rasi" "${USER_HOME}/.config/rofi/config.rasi"

  # basic polybar sample (if polybar is installed later you can tweak)
  cat > "${DOTFILES_DIR}/config/polybar/config" <<'EOF'
[bar/example]
width = 100%
height = 24
modules-left = date
modules-right = cpu memory
EOF
  ln -sf "${DOTFILES_DIR}/config/polybar/config" "${USER_HOME}/.config/polybar/config"

  echoinfo "Wrote sample rofi and polybar configs."
}

link_Xresources_srcery(){
  # If we have srcery Xresources in dotfiles, link it to ~/.Xresources (and load)
  if [[ -f "${DOTFILES_DIR}/Xresources.srcery" ]]; then
    ln -sf "${DOTFILES_DIR}/Xresources.srcery" "${USER_HOME}/.Xresources"
    # merge right away
    xrdb -merge "${USER_HOME}/.Xresources" || echowarn "xrdb merge failed (maybe X not running)."
    echoinfo "Linked srcery Xresources -> ~/.Xresources and merged to X server if possible."
  else
    echowarn "No srcery Xresources found in ${DOTFILES_DIR}; skipping linking."
  fi
}

enable_services(){
  echoinfo "Enabling NetworkManager and CUPS services (if installed)..."
  sudo systemctl enable --now NetworkManager.service || echowarn "NetworkManager enable failed"
  sudo systemctl enable --now cups.service || echowarn "CUPS enable failed or not installed"
}

final_notes(){
  cat <<EOF

Done â€” basic installation and dotfiles generation finished.

Next steps (recommended):
  1. Review ${DOTFILES_DIR} and remove/modify anything you don't want.
  2. Log out and start X with: startx
     - Or enable a display manager of your choice (gdm/sddm/lightdm).
  3. If you want polybar, monior, or other components, customize ${DOTFILES_DIR}/config/*.
  4. To install more AUR packages, edit the array at top of the script and re-run 'install_aur_packages' step or run:
       yay -S <package-name>
  5. If you want the full official Srcery configs for Alacritty / Termite / iTerm2 etc, they were pulled from:
       ${SRCERY_REPO}
     (the script attempted to copy Xresources & alacritty.yml into ${DOTFILES_DIR})

Important: You can safely re-run this script; it mostly symlinks and uses --noconfirm installs.

EOF
}

# ----------------------
# Main
# ----------------------
main(){
  check_arch
  ensure_sudo
  echoinfo "Starting Arch dotfiles installer..."

  # Install system packages
  install_pacman_packages

  # Ensure AUR build dependencies are installed
  echoinfo "Ensuring AUR build dependencies (base-devel, git)..."
  sudo pacman -S --needed --noconfirm "${AUR_BUILD_DEPENDENCIES[@]}"

  # Install yay (AUR helper)
  install_aur_helper

  # Install AUR packages
  install_aur_packages

  # Create dotfiles layout
  create_dotfiles_layout

  # Fetch srcery Xresources & optional alacritty config
  install_srcery_xresources

  # Write dotfile contents and symlinks
  write_bashrc
  write_xinitrc_and_i3
  write_alacritty_config
  write_rofi_and_polybar_samples

  # Link Xresources to ~/.Xresources and load (if available)
  link_Xresources_srcery

  # Enable services
  enable_services

  final_notes
}

# run
main "$@"
